<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <AssemblyName>CelesteTAS-EverestInterop</AssemblyName>
        <RootNamespace>TAS</RootNamespace>
        <TargetFramework>net7.0</TargetFramework>
        <LangVersion>latest</LangVersion>

        <CelestePrefix Condition="'$(CelestePrefix)' == '' And Exists('../../../Celeste.dll')">../../..</CelestePrefix>
        <CelestePrefix Condition="'$(CelestePrefix)' == ''">lib-stripped</CelestePrefix>

        <Product>CelesteTAS-EverestInterop</Product>
        <Copyright>Copyright © 2018</Copyright>

        <!-- See https://github.com/BepInEx/BepInEx.AssemblyPublicizer/issues/5 -->
        <NoWarn>$(NoWarn);CS0436</NoWarn>

        <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
        <EnableUnsafeBinaryFormatterSerialization>true</EnableUnsafeBinaryFormatterSerialization>
    </PropertyGroup>

    <PropertyGroup>
        <PathMap>$(MSBuildProjectDirectory)=CelesteTAS/</PathMap>
    </PropertyGroup>

    <Import Project="..\StudioCommunication\StudioCommunication.targets" />
    
    <ItemGroup>
        <Reference Include="$(CelestePrefix)\Celeste.dll" Publicize="true" />
        <Reference Include="$(CelestePrefix)\FNA.dll" />
        <Reference Include="$(CelestePrefix)\MMHOOK_Celeste.dll" />
        
        <Reference Include="lib-stripped\SpeedrunTool.dll" />
        <Reference Include="lib-stripped\TASRecorder.dll" />
    </ItemGroup>
    
    <ItemGroup>
        <PackageReference Include="MonoMod.RuntimeDetour" Version="22.01.04.03" />
        <PackageReference Include="BepInEx.AssemblyPublicizer.MSBuild" Version="0.4.1" PrivateAssets="all" />

        <PackageReference Include="DotNetZip" Version="1.16.0" />
        <PackageReference Include="SharpZipLib" Version="1.4.2" IncludeAssets="all" />
        <PackageReference Include="YamlDotNet" Version="13.1.1" />

        <PackageReference Include="JetBrains.Annotations" Version="2024.2.0" />
        <PackageReference Include="JetBrains.Profiler.Api" Version="1.4.6" Condition="'$(Configuration)' == 'Debug'" />
    </ItemGroup>

    <Target Name="CopyFiles" AfterTargets="Build">
        <Copy SourceFiles="$(OutputPath)$(AssemblyName).dll" DestinationFolder="..\bin" />
        <Copy SourceFiles="$(OutputPath)$(AssemblyName).pdb" DestinationFolder="..\bin" />
        
        <Copy SourceFiles="EverestInterop\Lua\env.lua" DestinationFiles="..\bin\env.lua" />

        <Copy SourceFiles="$(OutputPath)ICSharpCode.SharpZipLib.dll" DestinationFolder="..\bin" />
        <Copy SourceFiles="$(OutputPath)MemoryPack.Core.dll" DestinationFolder="..\bin" />
        <Copy SourceFiles="$(OutputPath)JetBrains.Profiler.Api.dll" DestinationFolder="..\bin" Condition="'$(Configuration)' == 'Debug'" />
    </Target>

    <Target Name="PackageMod" AfterTargets="CopyFiles" Inputs="$(ZippedFiles)" Outputs="..\CelesteMod.zip" Condition="'$(Configuration)' == 'Release'">
        <ItemGroup>
            <FilesToPackage Include="..\everest.yaml;..\bin\**\*.*;..\Audio\**\*.*;..\Dialog\**\*.*;..\Graphics\**\*.*;..\Ahorn\**\*.*;..\Loenn\**\*.*" />
        </ItemGroup>
        <PackageMod Files="@(FilesToPackage)" OutputPath="..\CelesteTAS-EverestInterop.zip" />
    </Target>

    <!-- Inline task used to create a .zip for the mod -->
    <UsingTask TaskName="PackageMod"
               TaskFactory="RoslynCodeTaskFactory"
               AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
        <ParameterGroup>
            <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <OutputPath ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System.IO" />
            <Using Namespace="System.IO.Compression" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                var projectDir = Path.Combine(@"$(ProjectDir)", ".."); // Go one level up, since we're inside the 'Source' directory
                projectDir = Uri.UnescapeDataString(projectDir);
            
                if (File.Exists(OutputPath))
                    File.Delete(OutputPath);

                using (ZipArchive zip = ZipFile.Open(OutputPath, ZipArchiveMode.Create))
                {
                    foreach (var file in Files)
                    {
                        string filePath = file.GetMetadata("FullPath");
                        string entryName = GetRelativePath(projectDir, filePath);
                        
                        zip.CreateEntryFromFile(filePath, entryName);
                    }
                }
    
                string GetRelativePath(string fromPath, string toPath)
                {
                    if (string.IsNullOrEmpty(fromPath)) throw new ArgumentNullException(nameof(fromPath));
                    if (string.IsNullOrEmpty(toPath))   throw new ArgumentNullException(nameof(toPath));
                
                    Uri fromUri = new Uri(fromPath);
                    Uri toUri = new Uri(toPath);
                
                    if (fromUri.Scheme != toUri.Scheme) { return toPath; } // path can't be made relative.
                
                    Uri relativeUri = fromUri.MakeRelativeUri(toUri);
                    string relativePath = Uri.UnescapeDataString(relativeUri.ToString());
                
                    if (toUri.Scheme.Equals("file", StringComparison.InvariantCultureIgnoreCase))
                    {
                        relativePath = relativePath.Replace(Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar);
                    }
                
                    return relativePath;
                }
            ]]>
            </Code>
        </Task>
    </UsingTask>

</Project>